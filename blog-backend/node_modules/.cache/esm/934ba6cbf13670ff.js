let mongoose,Schema,bcrypt,jwt;_f13‍.x([["default",()=>_f13‍.o]]);_f13‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_f13‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_f13‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    userid:String,
    hashedPassword:String,
});

UserSchema.methods.setPassword = async function(password){
    const hash = await bcrypt.hash(password,10);
    this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password){
    const result = await bcrypt.compare(password,this.hashedPassword);
    return result;
}

UserSchema.statics.findByUserId = function(userid){
    return this.findOne({userid});
}

UserSchema.methods.serialize = function(){
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
}

UserSchema.methods.generateToken = function(){
    const token = jwt.sign(
        //첫번째 파라미터에는 토큰안에 집어넣고 싶은 데이터를 넣습니다.
        {
            _id:this.id,
            userid:this.userid,
        },
        process.env.JWT_SECRET, //두번째 파라미터에는 JWT암호를 넣습니다.
        {
            expiresIn:'7d' //7일동안 유효함
        }
    );
    return token;
}

const User = mongoose.model('User',UserSchema);
_f13‍.d(User);